-----------------<0>------------------
programe	->	import_staments	top_decls	
-----------------</0>------------------

-----------------<1>------------------
import_staments	->	import_staments	import_stament	
-----------------</1>------------------

-----------------<2>------------------
import_staments	->	
-----------------</2>------------------

-----------------<3>------------------
import_stament	->	import	NAME	
-----------------</3>------------------

-----------------<4>------------------
NAME	->	name	.	NAME	
-----------------</4>------------------

-----------------<5>------------------
NAME	->	name	;	
-----------------</5>------------------

-----------------<6>------------------
name	->	id	
-----------------</6>------------------

-----------------<7>------------------
top_decls	->	top_decls	top_decl	
-----------------</7>------------------

-----------------<8>------------------
top_decls	->	
-----------------</8>------------------

-----------------<9>------------------
top_decl	->	defun	
-----------------</9>------------------

-----------------<10>------------------
top_decl	->	defvars	
-----------------</10>------------------

-----------------<11>------------------
top_decl	->	defconst	
-----------------</11>------------------

-----------------<12>------------------
top_decl	->	defstruct	
-----------------</12>------------------

-----------------<13>------------------
top_decl	->	TYPEDEF	
-----------------</13>------------------

-----------------<14>------------------
defvars	->	storage	type	name	initial_expr	other_vars	;	
-----------------</14>------------------

-----------------<15>------------------
other_vars	->	
-----------------</15>------------------

-----------------<16>------------------
other_vars	->	other_vars	other_var	
-----------------</16>------------------

-----------------<17>------------------
other_var	->	comma	name	initial_expr	
-----------------</17>------------------

-----------------<18>------------------
initial_expr	->	
-----------------</18>------------------

-----------------<19>------------------
initial_expr	->	=	expr	
-----------------</19>------------------

-----------------<20>------------------
storage	->	
-----------------</20>------------------

-----------------<21>------------------
storage	->	static	
-----------------</21>------------------

-----------------<22>------------------
defun	->	storage	type	name	(	params	)	block	
-----------------</22>------------------

-----------------<23>------------------
params	->	fixed_params	kwargs	
-----------------</23>------------------

-----------------<24>------------------
params	->	void	
-----------------</24>------------------

-----------------<25>------------------
fixed_params	->	fixed_params	comma	param	
-----------------</25>------------------

-----------------<26>------------------
fixed_params	->	param	
-----------------</26>------------------

-----------------<27>------------------
param	->	type	name	
-----------------</27>------------------

-----------------<28>------------------
kwargs	->	
-----------------</28>------------------

-----------------<29>------------------
kwargs	->	comma	...	
-----------------</29>------------------

-----------------<30>------------------
block	->	{	block_componets	}	
-----------------</30>------------------

-----------------<31>------------------
block_componets	->	
-----------------</31>------------------

-----------------<32>------------------
block_componets	->	block_componets	block_componet	
-----------------</32>------------------

-----------------<33>------------------
defstruct	->	struct	name	member_list	;	
-----------------</33>------------------

-----------------<34>------------------
defunion	->	union	name	member_list	;	
-----------------</34>------------------

-----------------<35>------------------
member_list	->	{	slots	}	
-----------------</35>------------------

-----------------<36>------------------
slots	->	
-----------------</36>------------------

-----------------<37>------------------
slots	->	slots	type	name	;	
-----------------</37>------------------

-----------------<38>------------------
TYPEDEF	->	typedef	type	typeName	;	
-----------------</38>------------------

-----------------<39>------------------
top_decl	->	defunion	
-----------------</39>------------------

-----------------<40>------------------
type	->	primary_type	type_postfix	
-----------------</40>------------------

-----------------<41>------------------
type_postfix	->	
-----------------</41>------------------

-----------------<42>------------------
type_postfix	->	type_postfix	[	]	
-----------------</42>------------------

-----------------<43>------------------
type_postfix	->	type_postfix	[	INTEGER	]	
-----------------</43>------------------

-----------------<44>------------------
type_postfix	->	type_postfix	*	
-----------------</44>------------------

-----------------<45>------------------
type_postfix	->	type_postfix	(	param_typerefs	)	
-----------------</45>------------------

-----------------<46>------------------
type_postfix	->	type_postfix	(	void	)	
-----------------</46>------------------

-----------------<47>------------------
param_typerefs	->	fixed_param_ref	kwargs	
-----------------</47>------------------

-----------------<48>------------------
fixed_param_ref	->	fixed_param_ref	comma	type	
-----------------</48>------------------

-----------------<49>------------------
fixed_param_ref	->	type	
-----------------</49>------------------

-----------------<50>------------------
opassign_op	->	-=	
-----------------</50>------------------

-----------------<51>------------------
primary_type	->	signed	int_type	
-----------------</51>------------------

-----------------<52>------------------
primary_type	->	unsigned	int_type	
-----------------</52>------------------

-----------------<53>------------------
primary_type	->	char	
-----------------</53>------------------

-----------------<54>------------------
primary_type	->	void	
-----------------</54>------------------

-----------------<55>------------------
primary_type	->	struct	id	
-----------------</55>------------------

-----------------<56>------------------
primary_type	->	union	id	
-----------------</56>------------------

-----------------<57>------------------
stmts	->	
-----------------</57>------------------

-----------------<58>------------------
stmts	->	stmts	stmt	
-----------------</58>------------------

-----------------<59>------------------
stmt	->	;	
-----------------</59>------------------

-----------------<60>------------------
stmt	->	block	
-----------------</60>------------------

-----------------<61>------------------
stmt	->	label_stmt	
-----------------</61>------------------

-----------------<62>------------------
stmt	->	expr	;	
-----------------</62>------------------

-----------------<63>------------------
stmt	->	if_stmt	
-----------------</63>------------------

-----------------<64>------------------
stmt	->	while_stmt	
-----------------</64>------------------

-----------------<65>------------------
stmt	->	dowhile_stmt	
-----------------</65>------------------

-----------------<66>------------------
stmt	->	for_stmt	
-----------------</66>------------------

-----------------<67>------------------
stmt	->	switch_stmt	
-----------------</67>------------------

-----------------<68>------------------
stmt	->	goto_stmt	
-----------------</68>------------------

-----------------<69>------------------
stmt	->	break_stmt	
-----------------</69>------------------

-----------------<70>------------------
stmt	->	continue_stmt	
-----------------</70>------------------

-----------------<71>------------------
stmt	->	return_stmt	
-----------------</71>------------------

-----------------<72>------------------
if_stmt	->	if	(	expr	)	stmt	
-----------------</72>------------------

-----------------<73>------------------
if_stmt	->	if	(	expr	)	stmt	else	stmt	
-----------------</73>------------------

-----------------<74>------------------
while_stmt	->	while	(	expr	)	stmt	
-----------------</74>------------------

-----------------<75>------------------
dowhile_stmt	->	do	stmt	while	(	expr	)	;	
-----------------</75>------------------

-----------------<76>------------------
for_stmt	->	for	(	forIniitialer	optional_for_expr	;	optional_for_exprs	)	stmt	
-----------------</76>------------------

-----------------<77>------------------
optional_for_expr	->	
-----------------</77>------------------

-----------------<78>------------------
optional_for_expr	->	expr	
-----------------</78>------------------

-----------------<79>------------------
break_stmt	->	break	;	
-----------------</79>------------------

-----------------<80>------------------
goto_stmt	->	goto	id	;	
-----------------</80>------------------

-----------------<81>------------------
continue_stmt	->	continue	;	
-----------------</81>------------------

-----------------<82>------------------
return_stmt	->	return	;	
-----------------</82>------------------

-----------------<83>------------------
return_stmt	->	return	expr	;	
-----------------</83>------------------

-----------------<84>------------------
label_stmt	->	id	:	stmt	
-----------------</84>------------------

-----------------<85>------------------
label_stmt	->	case	INTEGER	:	stmt	
-----------------</85>------------------

-----------------<86>------------------
label_stmt	->	defult	:	
-----------------</86>------------------

-----------------<87>------------------
switch_stmt	->	switch	(	expr	)	{	label_stmts	}	
-----------------</87>------------------

-----------------<88>------------------
label_stmts	->	label_stmts	label_stmt	
-----------------</88>------------------

-----------------<89>------------------
label_stmts	->	label_stmt	
-----------------</89>------------------

-----------------<90>------------------
expr	->	term	=	expr	
-----------------</90>------------------

-----------------<91>------------------
expr	->	term	opassign_op	expr	
-----------------</91>------------------

-----------------<92>------------------
expr	->	conditional_expr	
-----------------</92>------------------

-----------------<93>------------------
conditional_expr	->	logical_or_expr	
-----------------</93>------------------

-----------------<94>------------------
conditional_expr	->	logical_or_expr	?	expr	:	conditional_expr	
-----------------</94>------------------

-----------------<95>------------------
logical_or_expr	->	logical_and_expr	
-----------------</95>------------------

-----------------<96>------------------
logical_or_expr	->	logical_or_expr	||	logical_and_expr	
-----------------</96>------------------

-----------------<97>------------------
logical_and_expr	->	equality_expr	
-----------------</97>------------------

-----------------<98>------------------
logical_and_expr	->	logical_and_expr	&&	equality_expr	
-----------------</98>------------------

-----------------<99>------------------
equality_expr	->	relational_expr	
-----------------</99>------------------

-----------------<100>------------------
equality_expr	->	equality_expr	==	relational_expr	
-----------------</100>------------------

-----------------<101>------------------
equality_expr	->	equality_expr	!=	relational_expr	
-----------------</101>------------------

-----------------<102>------------------
relational_expr	->	shift_expr	
-----------------</102>------------------

-----------------<103>------------------
relational_expr	->	relational_expr	<	shift_expr	
-----------------</103>------------------

-----------------<104>------------------
relational_expr	->	relational_expr	>	shift_expr	
-----------------</104>------------------

-----------------<105>------------------
relational_expr	->	relational_expr	<=	shift_expr	
-----------------</105>------------------

-----------------<106>------------------
relational_expr	->	relational_expr	>=	shift_expr	
-----------------</106>------------------

-----------------<107>------------------
shift_expr	->	additive_expr	
-----------------</107>------------------

-----------------<108>------------------
shift_expr	->	shift_expr	<<	additive_expr	
-----------------</108>------------------

-----------------<109>------------------
shift_expr	->	shift_expr	>>	additive_expr	
-----------------</109>------------------

-----------------<110>------------------
additive_expr	->	multiplicative_expr	
-----------------</110>------------------

-----------------<111>------------------
additive_expr	->	additive_expr	+	multiplicative_expr	
-----------------</111>------------------

-----------------<112>------------------
additive_expr	->	additive_expr	-	multiplicative_expr	
-----------------</112>------------------

-----------------<113>------------------
multiplicative_expr	->	term	
-----------------</113>------------------

-----------------<114>------------------
multiplicative_expr	->	multiplicative_expr	*	term	
-----------------</114>------------------

-----------------<115>------------------
multiplicative_expr	->	multiplicative_expr	/	term	
-----------------</115>------------------

-----------------<116>------------------
multiplicative_expr	->	multiplicative_expr	%	term	
-----------------</116>------------------

-----------------<117>------------------
term	->	unary_expr	
-----------------</117>------------------

-----------------<118>------------------
term	->	(	type	)	unary_expr	
-----------------</118>------------------

-----------------<119>------------------
unary_expr	->	postfix_expr	
-----------------</119>------------------

-----------------<120>------------------
unary_expr	->	++	unary_expr	
-----------------</120>------------------

-----------------<121>------------------
unary_expr	->	--	unary_expr	
-----------------</121>------------------

-----------------<122>------------------
unary_expr	->	unary_operator	term	
-----------------</122>------------------

-----------------<123>------------------
unary_expr	->	SIZEOF	unary_expr	
-----------------</123>------------------

-----------------<124>------------------
unary_expr	->	SIZEOF	(	type	)	
-----------------</124>------------------

-----------------<125>------------------
unary_operator	->	+	
-----------------</125>------------------

-----------------<126>------------------
unary_operator	->	-	
-----------------</126>------------------

-----------------<127>------------------
unary_operator	->	!	
-----------------</127>------------------

-----------------<128>------------------
unary_operator	->	~	
-----------------</128>------------------

-----------------<129>------------------
unary_operator	->	*	
-----------------</129>------------------

-----------------<130>------------------
unary_operator	->	&	
-----------------</130>------------------

-----------------<131>------------------
postfix_expr	->	primary_expr	
-----------------</131>------------------

-----------------<132>------------------
postfix_expr	->	postfix_expr	[	expr	]	
-----------------</132>------------------

-----------------<133>------------------
postfix_expr	->	postfix_expr	(	)	
-----------------</133>------------------

-----------------<134>------------------
postfix_expr	->	postfix_expr	(	args	)	
-----------------</134>------------------

-----------------<135>------------------
postfix_expr	->	postfix_expr	.	name	
-----------------</135>------------------

-----------------<136>------------------
postfix_expr	->	postfix_expr	->	name	
-----------------</136>------------------

-----------------<137>------------------
postfix_expr	->	postfix_expr	++	
-----------------</137>------------------

-----------------<138>------------------
postfix_expr	->	postfix_expr	--	
-----------------</138>------------------

-----------------<139>------------------
primary_expr	->	id	
-----------------</139>------------------

-----------------<140>------------------
primary_expr	->	CONSTANT	
-----------------</140>------------------

-----------------<141>------------------
primary_expr	->	(	expr	)	
-----------------</141>------------------

-----------------<142>------------------
CONSTANT	->	INTEGER	
-----------------</142>------------------

-----------------<143>------------------
CONSTANT	->	CHARACTOR	
-----------------</143>------------------

-----------------<144>------------------
CONSTANT	->	STRING	
-----------------</144>------------------

-----------------<145>------------------
CONSTANT	->	FLOAT	
-----------------</145>------------------

-----------------<146>------------------
opassign_op	->	+=	
-----------------</146>------------------

-----------------<147>------------------
opassign_op	->	*=	
-----------------</147>------------------

-----------------<148>------------------
opassign_op	->	/=	
-----------------</148>------------------

-----------------<149>------------------
opassign_op	->	%=	
-----------------</149>------------------

-----------------<150>------------------
defconst	->	const	type	id	=	expr	;	
-----------------</150>------------------

-----------------<151>------------------
args	->	expr	
-----------------</151>------------------

-----------------<152>------------------
args	->	args	comma	expr	
-----------------</152>------------------

-----------------<153>------------------
primary_type	->	bool	
-----------------</153>------------------

-----------------<154>------------------
primary_type	->	int_type	
-----------------</154>------------------

-----------------<155>------------------
primary_type	->	float	
-----------------</155>------------------

-----------------<156>------------------
primary_type	->	double	
-----------------</156>------------------

-----------------<157>------------------
int_type	->	long	
-----------------</157>------------------

-----------------<158>------------------
int_type	->	long	long	
-----------------</158>------------------

-----------------<159>------------------
int_type	->	short	
-----------------</159>------------------

-----------------<160>------------------
int_type	->	int	
-----------------</160>------------------

-----------------<161>------------------
block_componet	->	defvars	
-----------------</161>------------------

-----------------<162>------------------
block_componet	->	stmt	
-----------------</162>------------------

-----------------<163>------------------
forIniitialer	->	defvars	
-----------------</163>------------------

-----------------<164>------------------
forIniitialer	->	optional_for_exprs	;	
-----------------</164>------------------

-----------------<165>------------------
optional_for_exprs	->	optional_for_expr	
-----------------</165>------------------

-----------------<166>------------------
optional_for_exprs	->	optional_for_exprs	comma	optional_for_expr	
-----------------</166>------------------

-----------------<167>------------------
initial_expr	->	=	{	expr_list	}	
-----------------</167>------------------

-----------------<168>------------------
expr_list	->	
-----------------</168>------------------

-----------------<169>------------------
expr_list	->	expr	
-----------------</169>------------------

-----------------<170>------------------
expr_list	->	expr_list	comma	expr	
-----------------</170>------------------

-----------------<171>------------------
typeName	->	id	
-----------------</171>------------------

-----------------<172>------------------
primary_type	->	typeName	
-----------------</172>------------------

-----------------<173>------------------
top_decl	->	extern	fun_decl	
-----------------</173>------------------

-----------------<174>------------------
top_decl	->	extern	var_decl	
-----------------</174>------------------

-----------------<175>------------------
fun_decl	->	storage	type	name	(	param_decl	)	;	
-----------------</175>------------------

-----------------<176>------------------
param_decl	->	fixed_params	kwargs	
-----------------</176>------------------

-----------------<177>------------------
param_decl	->	param_typerefs	
-----------------</177>------------------

-----------------<178>------------------
var_decl	->	storage	type	name	other_var_decls	;	
-----------------</178>------------------

-----------------<179>------------------
other_var_decls	->	
-----------------</179>------------------

-----------------<180>------------------
other_var_decls	->	other_var_decls	other_var_decl	
-----------------</180>------------------

-----------------<181>------------------
other_var_decl	->	comma	name	
-----------------</181>------------------

-----------------<182>------------------
programe'	->	programe	
-----------------</182>------------------

