programe,import_staments,top_decls

//导入外部文件
import_staments,import_staments,import_stament
import_staments,ε
import_stament,import,NAME

//外部文件名
NAME,name,.,NAME
NAME,name,;
name,id

//
//顶层定义
top_decls,top_decls,top_decl
top_decls,ε
top_decl,defun
top_decl,defvars
top_decl,defconst
top_decl,defstruct
top_decl,TYPEDEF

//变量定义
defvars,storage,type,name,initial_expr,other_vars,;
//由逗号分割的其他变量的定义
other_vars,ε
other_vars,other_vars,other_var
other_var,comma,name,initial_expr

//可选的初始化表达式
initial_expr,ε
initial_expr,=,expr

//静态声明
storage,ε
storage,static

//函数定义
defun,storage,type,name,(,params,),block
params,fixed_params,kwargs
params,void,
//定长参数
fixed_params,fixed_params,comma,param
fixed_params,param,
//单个参数
param,type,name
//可变长部分
kwargs,ε
kwargs,comma,...
//函数体
// block,{,defvar_list,stmts,}
// 更换为:
block,{,block_componets,}

block_componets ,ε,
block_componets, block_componets,block_componet

//变量定义列表
//defvar_list,ε //删除
//defvar_list,defvar_list,defvars //删除

//结构体和联合体定义
defstruct,struct,name,member_list,;
defunion,union,name,member_list,;
//成员列表
member_list,{,slots,}
slots,ε
slots,slots,type,name,;

//类型定义
TYPEDEF,typedef,type,typeName,;
top_decl,defunion

//类型引用
type,primary_type,type_postfix
type_postfix,ε
type_postfix,type_postfix,[,]
type_postfix,type_postfix,[,INTEGER,]
type_postfix,type_postfix,*
//函数指针
type_postfix,type_postfix,(,param_typerefs,)
type_postfix,type_postfix,(,void,)

//函数指针的参数列表
param_typerefs,fixed_param_ref,kwargs
//param_typerefs,void

fixed_param_ref,fixed_param_ref,comma,type
fixed_param_ref,type

opassign_op,-=

//基本类型
//typeref_base,void
//typeref_base,char
//typeref_base,int
//typeref_base,float
//typeref_base,struct,id
//typeref_base,union,id

primary_type,signed,int_type
primary_type,unsigned,int_type
primary_type,char,
primary_type,void,
primary_type,struct,id
primary_type,union,id

//
//语句
stmts,ε
stmts,stmts,stmt
stmt,;
stmt,block
//标签语句
stmt,label_stmt
//表达式语句
stmt,expr,;
//控制语句
stmt,if_stmt
stmt,while_stmt
stmt,dowhile_stmt
stmt,for_stmt
stmt,switch_stmt
stmt,goto_stmt
stmt,break_stmt
stmt,continue_stmt
stmt,return_stmt

if_stmt,if,(,expr,),stmt,
if_stmt,if,(,expr,),stmt,else,stmt

while_stmt,while,(,expr,),stmt
dowhile_stmt,do,stmt,while,(,expr,),;

for_stmt,for,(,forIniitialer,  , optional_for_expr,;,optional_for_exprs,),stmt
//可选的for表达式
optional_for_expr,ε,
optional_for_expr,expr

break_stmt,break,;
goto_stmt,goto,id,;
continue_stmt,continue,;
return_stmt,return,;
return_stmt,return,expr,;

label_stmt,id,:,stmt
label_stmt,case,INTEGER,:,stmt
label_stmt,defult,:,

switch_stmt,switch,(,expr,),{,label_stmts,}
label_stmts,label_stmts,label_stmt
label_stmts,label_stmt

//
//表达式
//赋值表达式
expr,term,=,expr
//复合运算符
expr,term,opassign_op,expr
expr,conditional_expr

//三元表达式
conditional_expr,logical_or_expr,
conditional_expr,logical_or_expr,?,expr,:,conditional_expr,

//逻辑表达式
logical_or_expr,logical_and_expr,
logical_or_expr,logical_or_expr,||,logical_and_expr,
logical_and_expr,equality_expr
logical_and_expr,logical_and_expr,&&,equality_expr,

//相等比较
equality_expr,relational_expr,
equality_expr,equality_expr,==,relational_expr,
equality_expr,equality_expr,!=,relational_expr,

//关系表达式
relational_expr,shift_expr,
relational_expr,relational_expr,<,shift_expr,
relational_expr,relational_expr,>,shift_expr,
relational_expr,relational_expr,<=,shift_expr,
relational_expr,relational_expr,>=,shift_expr,

//移位
shift_expr,additive_expr,
shift_expr,shift_expr,<<,additive_expr,
shift_expr,shift_expr,>>,additive_expr,

//加减
additive_expr,multiplicative_expr,
additive_expr,additive_expr,+,multiplicative_expr,
additive_expr,additive_expr,-,multiplicative_expr,

//乘除,取余数
multiplicative_expr,term,
multiplicative_expr,multiplicative_expr,*,term,
multiplicative_expr,multiplicative_expr,/,term,
multiplicative_expr,multiplicative_expr,%,term,

//
//项
term,unary_expr,
term,(,type,),unary_expr,

//前置一元运算表达式
unary_expr,postfix_expr,
unary_expr,++,unary_expr,
unary_expr,--,unary_expr,
unary_expr,unary_operator,term,
unary_expr,SIZEOF,unary_expr,
unary_expr,SIZEOF,(,type,)

//一元运算符
unary_operator,+
unary_operator,-
unary_operator,!
unary_operator,~
unary_operator,*
unary_operator,&

//后置运算符
postfix_expr,primary_expr,
//数组和函数调用
postfix_expr,postfix_expr,[,expr,],
postfix_expr,postfix_expr,(,),
postfix_expr,postfix_expr,(,args,),
//取成员
postfix_expr,postfix_expr,.,name,
postfix_expr,postfix_expr,->,name,
//递增和递减
postfix_expr,postfix_expr,++,
postfix_expr,postfix_expr,--,

//项的基体
primary_expr,id,
primary_expr,CONSTANT,
primary_expr,(,expr,),

//常量
CONSTANT,INTEGER
CONSTANT,CHARACTOR
CONSTANT,STRING
CONSTANT,FLOAT

opassign_op,+=
opassign_op,*=
opassign_op,/=
opassign_op,%=

//常量定义
defconst,const,type,id,=,expr,;

//实参列表
args,expr,
args,args,comma,expr,

//补充
primary_type,bool
//-----
primary_type,int_type,
primary_type,float,
primary_type,double,

int_type,long
int_type,long,long
int_type,short
int_type,int

//支持C99中的"变量定义和语句可以在块中以任意顺序出现"
block_componet,defvars
block_componet,stmt

//支持for语句的初始化中可以定义变量
forIniitialer,defvars
forIniitialer,optional_for_exprs,;


optional_for_exprs,optional_for_expr
optional_for_exprs,optional_for_exprs,comma,optional_for_expr

//ini_expr,expr
initial_expr,=,{,expr_list,}

expr_list,ε,
expr_list,expr
expr_list,expr_list,comma,expr

//将param_ref改为param->param_ref->type

//支持自定义类型
//primary_type,id
typeName,id

primary_type,typeName

//增加函数和变量的声明,top_def改为top_decl
top_decl,extern,fun_decl
top_decl,extern,var_decl

//可以是带参数名和不带参数名
fun_decl,storage,type,name,(,param_decl,),;
//等于params-void
param_decl,fixed_params,kwargs,
param_decl,param_typerefs,

//外部变量声明
var_decl,storage,type,name,other_var_decls,;
other_var_decls,ε,
other_var_decls,other_var_decls,other_var_decl
other_var_decl,comma,name
